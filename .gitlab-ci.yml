stages:
  - build
  - release

#################### BUILD STAGE ####################
build_tsfdb_image:
  stage: build
  before_script:
    # Configure registries.
    - |
        export REGISTRIES=""

        # Login to gitlab docker registry.
        if [ -n "$CI_REGISTRY_IMAGE" ]; then
          echo "Logging in to gitlab registry."
          docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" \
            $CI_REGISTRY
          export REGISTRIES="$REGISTRIES $CI_REGISTRY_IMAGE"
          echo "Logged in to gitlab registry."
        else
          echo "No credentials provided for gitlab registry, skipping."
        fi

        # Login to other registry.
        if [ -n "$EXT_REGISTRY" ] && \
           [ -n "$EXT_REGISTRY_IMAGE" ] && \
           [ -n "$EXT_REGISTRY_USER" ] && \
           [ -n "$EXT_REGISTRY_PASSWORD" ]
        then
          echo "Logging in to $EXT_REGISTRY."
          docker login -u "$EXT_REGISTRY_USER" -p "$EXT_REGISTRY_PASSWORD" \
            "$EXT_REGISTRY"
          export REGISTRIES="$REGISTRIES $EXT_REGISTRY_IMAGE"
          echo "Logged in to $EXT_REGISTRY."
        else
          echo "No credentials provided for external registry, skipping."
        fi

        # Login to dockerhub.
        if [ -n "$DOCKERHUB_IMAGE" ] && \
           [ -n "$DOCKERHUB_USER" ] && \
           [ -n "$DOCKERHUB_PASSWORD" ]
        then
          echo "Logging in to dockerhub."
          docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD"
          export REGISTRIES="$REGISTRIES $DOCKERHUB_IMAGE"
          echo "Logged in to dockerhub."
        else
          echo "No credentials provided for dockerhub, skipping."
        fi

        # Check if any registry configured.
        if [ -z "$REGISTRIES" ]; then
          echo "No registries configured, exiting."
          exit 1
        fi
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - docker build --rm -t gcr.io/mist-ops/tsfdb:$CI_COMMIT_SHA .
    - docker tag gcr.io/mist-ops/tsfdb:$CI_COMMIT_SHA gcr.io/mist-ops/tsfdb:$CI_COMMIT_REF_SLUG
    - docker tag gcr.io/mist-ops/tsfdb:$CI_COMMIT_SHA mist/tsfdb:$CI_COMMIT_SHA
    - docker tag gcr.io/mist-ops/tsfdb:$CI_COMMIT_REF_SLUG mist/tsfdb:$CI_COMMIT_REF_SLUG
    - docker push gcr.io/mist-ops/tsfdb:$CI_COMMIT_SHA
    - docker push gcr.io/mist-ops/tsfdb:$CI_COMMIT_REF_SLUG
    - docker push mist/tsfdb:$CI_COMMIT_SHA
    - docker push mist/tsfdb:$CI_COMMIT_REF_SLUG
  tags:
    - builder
  dependencies: []


#################### RELEASE STAGE ####################

helm_chart_release:
  stage: release
  image: mist/helm-automation

  script:
    - |
        #! /usr/bin/env bash

        gcloud auth activate-service-account --key-file=$GCLOUD_SERVICE_KEY
        set -o errexit
        set -o nounset
        set -o pipefail
        readonly REPO_URL=https://mist-charts.storage.googleapis.com/
        readonly GCS_BUCKET=gs://mist-charts

        main() {
          if ! sync_repo chart "$GCS_BUCKET" "$REPO_URL"; then
              log_error "Not all charts could be packaged and synced!"
          fi
        }

        sync_repo() {
          local repo_dir="${1?Specify repo dir}"
          local bucket="${2?Specify repo bucket}"
          local repo_url="${3?Specify repo url}"
          local sync_dir="${repo_dir}-sync"
          local index_dir="${repo_dir}-index"

          helm init --client-only

          echo "Syncing repo '$repo_dir'..."

          mkdir -p "$sync_dir"
          mkdir -p "$index_dir"

          # Disable cache in requests and responses
          gsutil -m setmeta -h "Cache-Control:no-cache" "$bucket"/*.tgz
          gsutil -m setmeta -h "Cache-Control:no-cache" "$bucket"/index.yaml

          # Copy the index.yaml file from the bucket.
          if ! gsutil cp "$bucket/index.yaml" "$index_dir/index.yaml"; then
            log_error "Exiting because unable to copy index locally. Not safe to proceed."
            exit 1
          fi

          local return_value=0

          # Loop around each chart and package.
          for dir in "$repo_dir"/*; do
            if helm dependency build "$dir"; then
              helm package --destination "$sync_dir" "$dir"
            else
              log_error "Problem building dependencies. Skipping packaging of '$dir'."
              return_value=1
            fi
          done

          if helm repo index --url "$repo_url" --merge "$index_dir/index.yaml" "$sync_dir"; then

            # Move updated index.yaml to sync folder so we don't push the old one again
            mv -f "$sync_dir/index.yaml" "$index_dir/index.yaml"

            # Push all the local chart tarballs to the bucket.
            gsutil -m rsync "$sync_dir" "$bucket"

            # Make sure index.yaml is synced last
            gsutil cp "$index_dir/index.yaml" "$bucket"

          else
            log_error "Exiting because unable to update index. Not safe to push update."
            exit 1
          fi

          ls -l "$sync_dir"

          return "$return_value"
        }

        log_error() {
          printf '\e[31mERROR: %s\n\e[39m' "$1" >&2
        }

        main
  when: manual
  only:
    # only for references that match a version string (v1.2.3)
    - /^v\d+\.\d+\.\d+$/
  except:
    # Except branches, meaning it'll only apply to git tags
    - branches
